package jp.co.softbank.ppf.ppe.batch.main;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.gson.Gson;

import jp.co.softbank.ppf.ppe.batch.common.Const;
import jp.co.softbank.ppf.ppe.batch.common.ConstantParameterManager;
import jp.co.softbank.ppf.ppe.batch.common.Messages;
import jp.co.softbank.ppf.ppe.batch.dto.PhotoRecordDto;
import jp.co.softbank.ppf.ppe.batch.service.ImageDecryptCompressService;
import jp.co.softbank.ppf.ppe.batch.service.ImagePathFetcherService;
import jp.co.softbank.ppf.ppe.batch.service.PpsIMGTemporaryUploadServiceImpl;

public class ImageMaskingTool {
    private static Logger logger = LoggerFactory.getLogger(ImageMaskingTool.class);
    private static int minSize = 1280;
    private static float quality = 0.3f;

    /**
     * 
     * @param args パラメータ_1:ショップ分類コードlist、パラメータ_2:回数フラグ
     */
    public static void main(String[] args) {

        logger.info(Messages.getMessage(Messages.MSG004, new Gson().toJson(args)));

        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));
        String image_temporary_upload_result_csv_path = ConstantParameterManager
                .getConstParam("IMAGE_TEMPORARY_UPLOAD_RESULT_CSV_PATH");
        Path csvFile = Paths.get(image_temporary_upload_result_csv_path)
                .resolve("image_upload_result_" + timestamp + ".csv");

        int resultCd = Const.RESULTCD.NORMAL;
        if (args == null || args.length < 2) {
            logger.error("パラメータ不足");
            resultCd = Const.RESULTCD.ERROR;
            System.exit(resultCd);
        }
        List<String> shopClassificationCodeList = Arrays.asList(args[0].split(","));
        String roundFlag = args[1];

        List<PhotoRecordDto> photoRecords = null;
        try {
            photoRecords = ImagePathFetcherService.imagePathFetcher(shopClassificationCodeList, roundFlag);
            logger.info("datファイルパス取得済み、 {} 件", photoRecords.size());
        } catch (Exception e) {
            logger.error("datファイルパス取得失敗、異常:{}", e.getMessage(), e);
            resultCd = Const.RESULTCD.ERROR;
            System.exit(resultCd);
        }

        int compressSuccessCount = 0;
        int compressFailCount = 0;

        if (photoRecords == null) {
            System.exit(resultCd);
        }
        for (PhotoRecordDto photoRecord : photoRecords) {
            String photoPath = photoRecord.getPhotoPath();
            String thumbnailPath = photoRecord.getThumbnailPath();
            String base64Result = null;
            try {
                logger.info("画像復号圧縮処理開始:{}", photoPath);

                base64Result = ImageDecryptCompressService.decryptAndCompressToBase64(photoPath, minSize, quality);
                photoRecord.setBase64Result(base64Result);
                compressSuccessCount++;
                logger.info("画像復号圧縮処理成功:{}", photoPath);

            } catch (Exception e) {
                logger.error("画像復号圧縮処理失敗，パス:{}，異常:{}", photoPath, e.getMessage(), e);
                compressFailCount++;
                continue;
            }

            try {
                logger.info("画像マスキング一時アップロード開始:元画像{}、サムネイル{}", photoPath, thumbnailPath);
                PpsIMGTemporaryUploadServiceImpl.maskingImgTemporaryUpload(photoRecord, csvFile);
                logger.info("画像マスキング一時アップロード正常終了:、元画像{}、サムネイル{}", photoPath, thumbnailPath);
            } catch (Exception e) {
                logger.error("画像マスキング一時アップロード異常終了,異常:{}", e.getMessage(), e);
                continue;
            }
        }

        logger.info("画像復号圧縮: 成功:{}件, 失敗:{}件", compressSuccessCount, compressFailCount);
        logger.info("ファイル一時アップロード結果csv:{}", csvFile.toString());
        System.exit(resultCd);

    }

}
